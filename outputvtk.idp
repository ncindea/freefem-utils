/*
 *  some functions which allow to export scalar or vector variables in vtk
 * 
 * 04/09/2015, NC
 */

/* func bool scalar2vtk(mesh & Th, real[int] &u, string name, string filename)
 * 
 * mesh     - a triangular 2D mesh
 * u        - the solution we want to save in vtk
 * name     - name appearing in the vtk file
 * filename - name of the vtk file
 * 
 * Example :
 * =======
 * 
 * mesh Th = square(50);
 * func f = x^2 + y^2;
 * fespace Vh(Th, P1);
 * Vh u = f;
 * scalar2vtk(Th, u[], "a function", "example.vtk");
 */
func bool scalar2vtk(mesh & Th, real[int] &u, string name, string filename){
    real nv = Th.nv; // number of vortex
    
    { 
    // vtk file to save
    ofstream vtk(filename);
    vtk << "# vtk DataFile Version 2.0" << endl;
    vtk << name << endl;
    vtk << "ASCII" << endl;
    vtk << "DATASET UNSTRUCTURED_GRID" << endl;
    vtk << endl;
    vtk << "POINTS " << nv << " float" << endl;
    for (int i = 0; i < nv; i++){
        vtk << Th(i).x << " " << Th(i).y << " 0" << endl;
    }
    vtk << endl;
    
    vtk << "CELLS " << Th.nt << " " << 4 * Th.nt << endl;
    for (int i = 0; i < Th.nt; i++){
        vtk << "3 " << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << endl;
    }
    
    vtk << endl;
    vtk << "CELL_TYPES " << Th.nt << endl;
    for (int i = 0; i < Th.nt; i++){
        vtk << "5" << endl;
    }
    
    vtk << endl << "POINT_DATA " << nv << endl;
    
    vtk << "SCALARS " << name << " float" << endl;
    vtk << "LOOKUP_TABLE default" << endl;
    for (int i = 0; i < nv; i++){
        vtk << u[i] << endl;
    }
    }
}

func bool vector2vtk(mesh & Th, real[int] &ux, real[int] &uy, 
                     string name, string filename){
    bool ret = 0; 
    real nv = Th.nv; // number of vortex
    
    { 
    // vtk file to save
    ofstream vtk(filename);
    vtk << "# vtk DataFile Version 2.0" << endl;
    vtk << name << endl;
    vtk << "ASCII" << endl;
    vtk << "DATASET UNSTRUCTURED_GRID" << endl;
    vtk << endl;
    vtk << "POINTS " << nv << " float" << endl;
    for (int i = 0; i < nv; i++){
        vtk << Th(i).x << " " << Th(i).y << " 0" << endl;
    }
    vtk << endl;
    
    vtk << "CELLS " << Th.nt << " " << 4 * Th.nt << endl;
    for (int i = 0; i < Th.nt; i++){
        vtk << "3 " << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << endl;
    }
    
    vtk << endl;
    vtk << "CELL_TYPES " << Th.nt << endl;
    for (int i = 0; i < Th.nt; i++){
        vtk << "5" << endl;
    }
    
    vtk << endl << "POINT_DATA " << nv << endl;
    
    vtk << "VECTORS " << name << " float" << endl;
    for (int i = 0; i < nv; i++){
        vtk << ux[i] << " " << uy[i] << " 0" << endl;
    }
    }
    
    return  ret;
}
